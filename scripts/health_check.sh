#!/bin/bash

# NotionAiAssistant Health Check Script
# Verifica a sa√∫de do sistema e configura√ß√µes

ENV_FILE="/home/user0/docker-secrets/open-source-secrets/.env"
PROJECT_DIR="/home/user0/open-source-projects/NotionAiAssistant"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç NotionAiAssistant - Verifica√ß√£o de Sa√∫de${NC}"
echo "=========================================="

# Verificar localiza√ß√£o
if [ "$(pwd)" != "$PROJECT_DIR" ]; then
    echo -e "${YELLOW}üìÅ Navegando para diret√≥rio do projeto...${NC}"
    cd "$PROJECT_DIR" || exit 1
fi

# Verificar .env
echo -e "${BLUE}üìã Verificando arquivo de ambiente...${NC}"
if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}‚ùå Arquivo .env n√£o encontrado!${NC}"
    echo -e "${YELLOW}üí° Execute: make setup-env${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ Arquivo .env encontrado${NC}"
fi

# Verificar valores CHANGE_ME
echo -e "${BLUE}üîç Verificando configura√ß√µes padr√£o...${NC}"
if grep -q "CHANGE_ME" "$ENV_FILE"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env cont√©m valores padr√£o que precisam ser configurados:${NC}"
    grep "CHANGE_ME" "$ENV_FILE" | head -5 | sed 's/^/   /'
    echo -e "${BLUE}üìù Para editar: vi $ENV_FILE${NC}"
    echo ""
else
    echo -e "${GREEN}‚úÖ Arquivo .env configurado (sem valores padr√£o)${NC}"
fi

# Verificar permiss√µes do .env
echo -e "${BLUE}üîí Verificando permiss√µes...${NC}"
PERMS=$(stat -c %a "$ENV_FILE" 2>/dev/null)
if [ "$PERMS" = "600" ]; then
    echo -e "${GREEN}‚úÖ Permiss√µes corretas (600)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Permiss√µes incorretas ($PERMS), corrigindo...${NC}"
    chmod 600 "$ENV_FILE"
    echo -e "${GREEN}‚úÖ Permiss√µes corrigidas (600)${NC}"
fi

# Verificar Docker e containers
echo -e "${BLUE}üê≥ Verificando status dos containers...${NC}"
if command -v docker-compose >/dev/null 2>&1; then
    if docker-compose ps >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker Compose funcionando${NC}"
        
        # Status dos containers
        echo ""
        echo -e "${BLUE}üìä Status dos containers:${NC}"
        docker-compose ps | grep -E "(Name|notionia_)" || echo -e "${YELLOW}‚ö†Ô∏è  Nenhum container em execu√ß√£o${NC}"
        
        # Verificar logs de erro
        echo ""
        echo -e "${BLUE}üîç Verificando erros recentes nos logs:${NC}"
        ERROR_COUNT=$(docker-compose logs --tail=50 app 2>/dev/null | grep -i error | wc -l)
        if [ "$ERROR_COUNT" -gt 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Encontrados $ERROR_COUNT erros nos logs da aplica√ß√£o${NC}"
            echo -e "${BLUE}üìã √öltimos erros:${NC}"
            docker-compose logs --tail=50 app | grep -i error | tail -3 | sed 's/^/   /'
            echo -e "${BLUE}üí° Para ver logs completos: make logs-app${NC}"
        else
            echo -e "${GREEN}‚úÖ Nenhum erro encontrado nos logs recentes${NC}"
        fi
        
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Docker Compose n√£o est√° ativo ou tem problemas de configura√ß√£o${NC}"
    fi
else
    echo -e "${RED}‚ùå Docker Compose n√£o encontrado${NC}"
fi

# Verificar espa√ßo em disco
echo ""
echo -e "${BLUE}üíæ Verificando espa√ßo em disco...${NC}"
DISK_USAGE=$(df -h "$PROJECT_DIR" | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 80 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Uso de disco alto: ${DISK_USAGE}%${NC}"
else
    echo -e "${GREEN}‚úÖ Espa√ßo em disco OK: ${DISK_USAGE}% usado${NC}"
fi

# Verificar conectividade de rede
echo -e "${BLUE}üåê Verificando conectividade...${NC}"
if ping -c 1 google.com >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Conectividade de rede OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Problemas de conectividade de rede${NC}"
fi

# Resumo final
echo ""
echo "=========================================="
echo -e "${BLUE}üìä Resumo da Verifica√ß√£o de Sa√∫de:${NC}"

# Contagem de problemas
PROBLEMS=0
if [ ! -f "$ENV_FILE" ]; then ((PROBLEMS++)); fi
if grep -q "CHANGE_ME" "$ENV_FILE" 2>/dev/null; then ((PROBLEMS++)); fi
if [ "$ERROR_COUNT" -gt 0 ] 2>/dev/null; then ((PROBLEMS++)); fi

if [ "$PROBLEMS" -eq 0 ]; then
    echo -e "${GREEN}üéâ Sistema est√° saud√°vel! Nenhum problema cr√≠tico encontrado.${NC}"
    echo -e "${BLUE}üí° Para monitoramento cont√≠nuo: make monitor${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Encontrados $PROBLEMS problemas que precisam de aten√ß√£o.${NC}"
    echo -e "${BLUE}üí° Execute as corre√ß√µes sugeridas acima.${NC}"
fi

echo ""
echo -e "${BLUE}üìã Comandos √∫teis:${NC}"
echo -e "   ${GREEN}make setup-env${NC}     - Configurar arquivo .env"
echo -e "   ${GREEN}make validate-env${NC}  - Validar configura√ß√µes"
echo -e "   ${GREEN}make start${NC}         - Iniciar aplica√ß√£o"
echo -e "   ${GREEN}make status${NC}        - Verificar status"
echo -e "   ${GREEN}make logs-follow${NC}   - Acompanhar logs"
echo -e "   ${GREEN}make monitor${NC}       - Monitoramento completo"

echo "=========================================="
