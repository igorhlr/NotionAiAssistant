#!/bin/bash
# Script de Deploy Automatizado para Ambiente de Desenvolvimento - NotionAiAssistant
# Integra limpeza, seguran√ßa de vari√°veis e deploy para ambiente de desenvolvimento

set -e

# Configura√ß√µes
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
LOG_FILE="$PROJECT_DIR/logs/automated-deploy-dev.log"
ENVIRONMENT="development"
FORCE_CLEAN="${1:-false}"
ROTATE_SECRETS="${2:-false}"
DEV_PORT="${3:-8501}"
API_PORT="${4:-8080}"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de logging com cores
log() {
    local level="$1"
    local color="$NC"
    shift
    
    case "$level" in
        "ERROR") color="$RED" ;;
        "SUCCESS") color="$GREEN" ;;
        "WARNING") color="$YELLOW" ;;
        "INFO") color="$BLUE" ;;
    esac
    
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] [${color}${level}${NC}] $*" | tee -a "$LOG_FILE"
}

# Fun√ß√£o para exibir banner
show_banner() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                  NOTIONAIASSISTANT                           ‚ïë"
    echo "‚ïë              DEPLOY AUTOMATIZADO DEV                         ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë  üöÄ Deploy Integrado para Ambiente de Desenvolvimento        ‚ïë"
    echo "‚ïë  üîí Gest√£o Autom√°tica de Secrets para Desenvolvimento        ‚ïë"
    echo "‚ïë  üßπ Limpeza Inteligente do Projeto                          ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fun√ß√£o para verificar pr√©-requisitos
check_prerequisites() {
    log "INFO" "Verificando pr√©-requisitos do sistema..."
    
    local missing_tools=()
    
    # Verificar ferramentas essenciais
    local required_tools=("docker" "docker-compose" "git")
    
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log "ERROR" "Ferramentas faltando: ${missing_tools[*]}"
        exit 1
    fi
    
    # Verificar estrutura do projeto
    local critical_paths=(
        "docker-compose.yml"
        "config/secrets"
        "scripts/secure-env-management.sh"
        "app"
    )
    
    for path in "${critical_paths[@]}"; do
        if [ ! -e "$PROJECT_DIR/$path" ]; then
            log "ERROR" "Estrutura cr√≠tica faltando: $path"
            exit 1
        fi
    done
    
    # Verificar ambiente Docker
    if ! docker info >/dev/null 2>&1; then
        log "ERROR" "Docker n√£o est√° executando ou n√£o acess√≠vel"
        exit 1
    fi
    
    # Verificar rede Docker
    if ! docker network inspect shared_network >/dev/null 2>&1; then
        log "INFO" "Criando rede Docker shared_network..."
        docker network create shared_network
    fi
    
    # Criar diret√≥rio de secrets para development se n√£o existir
    if [ ! -d "$PROJECT_DIR/config/secrets/development" ]; then
        log "INFO" "Criando diret√≥rio de secrets para desenvolvimento..."
        mkdir -p "$PROJECT_DIR/config/secrets/development"
    fi
    
    log "SUCCESS" "Todos os pr√©-requisitos verificados"
}

# Fun√ß√£o para limpeza inteligente
intelligent_cleanup() {
    log "INFO" "Iniciando limpeza inteligente do projeto..."
    
    if [ "$FORCE_CLEAN" == "true" ]; then
        log "INFO" "Limpeza for√ßada ativada"
        chmod +x "$PROJECT_DIR/scripts/safe-cleanup.sh"
        "$PROJECT_DIR/scripts/safe-cleanup.sh" false
    else
        log "INFO" "Limpeza segura (apenas arquivos desnecess√°rios)"
        
        # Limpeza autom√°tica de arquivos seguros
        find "$PROJECT_DIR" -name ".DS_Store" -type f -delete 2>/dev/null || true
        find "$PROJECT_DIR" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find "$PROJECT_DIR" -name "*.pyc" -type f -delete 2>/dev/null || true
        
        log "SUCCESS" "Limpeza autom√°tica conclu√≠da"
    fi
}

# Fun√ß√£o para gest√£o segura de vari√°veis de ambiente para desenvolvimento
secure_environment_setup() {
    log "INFO" "Configurando vari√°veis de ambiente seguras para desenvolvimento..."
    
    # Verificar se o diret√≥rio de secrets para desenvolvimento existe
    if [ ! -d "$PROJECT_DIR/config/secrets/development" ]; then
        mkdir -p "$PROJECT_DIR/config/secrets/development"
        log "INFO" "Diret√≥rio de secrets para desenvolvimento criado"
    fi
    
    # Fun√ß√£o para criar secrets de desenvolvimento
    create_dev_secret() {
        local secret_name="$1"
        local secret_value="$2"
        local secret_file="$PROJECT_DIR/config/secrets/development/$secret_name"
        
        if [ ! -f "$secret_file" ] || [ "$ROTATE_SECRETS" == "true" ]; then
            echo -n "$secret_value" > "$secret_file"
            chmod 600 "$secret_file"
            log "INFO" "Secret de desenvolvimento $secret_name criado/atualizado"
        else
            log "INFO" "Secret de desenvolvimento $secret_name j√° existe, mantendo valor atual"
        fi
    }
    
    # Criar secrets b√°sicos para desenvolvimento
    create_dev_secret "postgres_password" "dev_pg_password"
    create_dev_secret "notioniauser_password" "dev_notioniauser_password"
    create_dev_secret "appuser_password" "dev_appuser_password"
    create_dev_secret "jwt_secret" "dev_jwt_secret_for_local_testing_only"
    create_dev_secret "admin_password" "dev_admin_password"
    
    # Verificar se h√° secrets de produ√ß√£o e copiar chaves de API (se solicitado)
    if [ -d "/home/user0/docker-secrets/open-source-secrets" ]; then
        log "INFO" "Encontrado diret√≥rio de secrets de produ√ß√£o"
        
        if [ "$ROTATE_SECRETS" != "true" ]; then
            # Copiar chaves de API da produ√ß√£o (opcional)
            for api_key in "openai_api_key" "notion_api_key" "anthropic_api_key" "deepseek_api_key"; do
                if [ -f "/home/user0/docker-secrets/open-source-secrets/$api_key" ]; then
                    if [ ! -f "$PROJECT_DIR/config/secrets/development/$api_key" ]; then
                        log "INFO" "Copiando $api_key da produ√ß√£o para desenvolvimento"
                        cp "/home/user0/docker-secrets/open-source-secrets/$api_key" "$PROJECT_DIR/config/secrets/development/$api_key"
                    fi
                else
                    log "WARNING" "$api_key n√£o encontrado em produ√ß√£o"
                    create_dev_secret "$api_key" "sk-dev-placeholder-key-for-testing"
                fi
            done
        else
            # Criar chaves de API placeholder para desenvolvimento
            create_dev_secret "openai_api_key" "sk-dev-placeholder-key-for-testing"
            create_dev_secret "notion_api_key" "secret_dev-placeholder-key-for-testing"
            create_dev_secret "anthropic_api_key" "sk-ant-dev-placeholder-key-for-testing"
            create_dev_secret "deepseek_api_key" "sk-deepseek-dev-placeholder-key-for-testing"
        fi
    else
        # Criar chaves de API placeholder para desenvolvimento
        create_dev_secret "openai_api_key" "sk-dev-placeholder-key-for-testing"
        create_dev_secret "notion_api_key" "secret_dev-placeholder-key-for-testing"
        create_dev_secret "anthropic_api_key" "sk-ant-dev-placeholder-key-for-testing"
        create_dev_secret "deepseek_api_key" "sk-deepseek-dev-placeholder-key-for-testing"
    fi
    
    log "SUCCESS" "Vari√°veis de ambiente de desenvolvimento configuradas"
}

# Fun√ß√£o para backup pr√©-deploy
pre_deploy_backup() {
    log "INFO" "Criando backup pr√©-deploy para ambiente de desenvolvimento..."
    
    local backup_timestamp=$(date '+%Y%m%d_%H%M%S')
    local backup_dir="$PROJECT_DIR/backups/dev-pre-deploy_$backup_timestamp"
    
    mkdir -p "$backup_dir"
    
    # Backup de configura√ß√µes cr√≠ticas
    cp -r "$PROJECT_DIR/config" "$backup_dir/" 2>/dev/null || true
    
    # Backup de dados se existirem
    if command -v docker >/dev/null 2>&1 && docker ps -q --filter "name=notionia_dev_postgres" >/dev/null 2>&1; then
        log "INFO" "Fazendo backup do banco de dados de desenvolvimento..."
        local db_backup="$backup_dir/database_backup.sql"
        
        docker exec notionia_dev_postgres pg_dump -U pguser_dev notionai_dev > "$db_backup" 2>/dev/null || {
            log "WARNING" "N√£o foi poss√≠vel fazer backup do banco de dados de desenvolvimento"
        }
    fi
    
    # Criar manifesto do backup
    cat > "$backup_dir/backup_manifest.json" << EOF
{
    "timestamp": "$(date -Iseconds)",
    "environment": "$ENVIRONMENT",
    "backup_type": "pre_deploy",
    "git_commit": "$(git rev-parse HEAD 2>/dev/null || echo 'unknown')",
    "git_branch": "$(git branch --show-current 2>/dev/null || echo 'unknown')"
}
EOF
    
    log "SUCCESS" "Backup de desenvolvimento criado em: $backup_dir"
    echo "$backup_dir"
}

# Fun√ß√£o para configurar ambiente Docker para desenvolvimento
setup_docker_environment() {
    log "INFO" "Configurando ambiente Docker para desenvolvimento..."
    
    # Certificar que o script tem permiss√£o de execu√ß√£o
    chmod +x "$PROJECT_DIR/scripts/setup-docker-env.sh"
    
    # Detectar ambiente e configurar vari√°veis
    source "$PROJECT_DIR/scripts/setup-docker-env.sh"
    
    log "INFO" "Ambiente Docker configurado: DOCKER_DATA_PATH=${DOCKER_DATA_PATH}"
    
    # Criar diret√≥rio para dados de desenvolvimento
    mkdir -p "${DOCKER_DATA_PATH}/docker-data/notion-assistant/dev/data"
    mkdir -p "${DOCKER_DATA_PATH}/docker-data/notion-assistant/dev/backups"
    mkdir -p "${DOCKER_DATA_PATH}/docker-data/notion-assistant/dev/logs"
    
    log "INFO" "Diret√≥rios para ambiente de desenvolvimento criados"
}

# Fun√ß√£o para gerar docker-compose.dev.yml
generate_dev_docker_compose() {
    log "INFO" "Gerando docker-compose.dev.yml para ambiente de desenvolvimento..."
    
    cat > "$PROJECT_DIR/docker-compose.dev.yml" << EOF
services:
  db:
    image: postgres:15-alpine
    container_name: notionia_dev_postgres
    environment:
      # Vari√°veis seguras do PostgreSQL - usando somente Docker Secrets
      POSTGRES_USER: pguser_dev
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: notionai_dev
      POSTGRES_HOST_AUTH_METHOD: md5
    secrets:
      - postgres_password
      - notioniauser_password
      - appuser_password
    volumes:
      - \${DOCKER_DATA_PATH:-./docker-data}/notion-assistant/dev/data:/var/lib/postgresql/data
      - \${DOCKER_DATA_PATH:-./docker-data}/notion-assistant/dev/backups:/backups
      - ./postgres-init:/docker-entrypoint-initdb.d
    command: ["postgres", "-c", "listen_addresses=*"]
    restart: unless-stopped
    networks:
      - shared_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pguser_dev -d notionai_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    ports:
      - "5433:5432"  # Mapeamento para porta diferente para n√£o conflitar com poss√≠vel inst√¢ncia em produ√ß√£o

  app:
    build:
      context: ./app
      dockerfile: Dockerfile.dev
    container_name: notionia_dev_app
    environment:
      # Vari√°veis de configura√ß√£o do banco (n√£o sens√≠veis)
      POSTGRES_USER: pguser_dev
      POSTGRES_DB: notionai_dev
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      
      # Configura√ß√µes da aplica√ß√£o
      ADMIN_EMAIL: admin@notionai-dev.local
      JWT_EXPIRE_MINUTES: 1440
      DEBUG: "True"
      ENVIRONMENT: "development"
      LOG_LEVEL: "DEBUG"
      RUNNING_IN_DOCKER: "true"
      
      # Configura√ß√µes opcionais (podem ser vazias)
      NOTION_PAGE_ID: ""
    secrets:
      # Secrets essenciais
      - postgres_password
      - notioniauser_password
      - appuser_password
      - jwt_secret
      - admin_password
      
      # Secrets opcionais para APIs externas (podem estar vazios)
      - openai_api_key
      - notion_api_key
      - anthropic_api_key
      - deepseek_api_key
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - shared_network
    volumes:
      - \${DOCKER_DATA_PATH:-./docker-data}/notion-assistant/dev/logs:/app/logs
      - ./app:/app  # Montar o c√≥digo fonte para desenvolvimento (hot reload)
    ports:
      - "${API_PORT}:8080"  # API
      - "${DEV_PORT}:8501"  # Frontend

secrets:
  # Secrets essenciais para opera√ß√£o da aplica√ß√£o
  postgres_password:
    file: ./config/secrets/development/postgres_password
  notioniauser_password:
    file: ./config/secrets/development/notioniauser_password
  appuser_password:
    file: ./config/secrets/development/appuser_password
  jwt_secret:
    file: ./config/secrets/development/jwt_secret
  admin_password:
    file: ./config/secrets/development/admin_password
    
  # Secrets opcionais para APIs externas
  openai_api_key:
    file: ./config/secrets/development/openai_api_key
  notion_api_key:
    file: ./config/secrets/development/notion_api_key
  anthropic_api_key:
    file: ./config/secrets/development/anthropic_api_key
  deepseek_api_key:
    file: ./config/secrets/development/deepseek_api_key

networks:
  shared_network:
    external: true
EOF
    
    log "SUCCESS" "Arquivo docker-compose.dev.yml criado com sucesso"
}

# Fun√ß√£o para deploy do Docker para desenvolvimento
docker_deploy_dev() {
    log "INFO" "Iniciando deploy Docker para ambiente de desenvolvimento..."
    
    cd "$PROJECT_DIR"
    
    # Configurar ambiente Docker primeiro
    setup_docker_environment
    
    # Gerar docker-compose.dev.yml
    generate_dev_docker_compose
    
    # Parar containers existentes
    log "INFO" "Parando containers de desenvolvimento existentes..."
    docker-compose -f docker-compose.dev.yml down -v || true
    
    # Construir e iniciar novos containers
    log "INFO" "Construindo e iniciando containers de desenvolvimento..."
    docker-compose -f docker-compose.dev.yml up -d --build
    
    # Aguardar inicializa√ß√£o
    log "INFO" "Aguardando inicializa√ß√£o dos servi√ßos de desenvolvimento..."
    sleep 10
    
    # Verificar status dos containers
    if docker ps | grep -q "notionia_dev_app" && docker ps | grep -q "notionia_dev_postgres"; then
        log "SUCCESS" "Containers de desenvolvimento iniciados com sucesso"
    else
        log "ERROR" "Falha ao iniciar containers de desenvolvimento"
        log "INFO" "Exibindo logs para diagn√≥stico:"
        docker-compose -f docker-compose.dev.yml logs --tail=50
        return 1
    fi
}

# Fun√ß√£o para verifica√ß√£o p√≥s-deploy
post_deploy_verification() {
    log "INFO" "Executando verifica√ß√µes p√≥s-deploy para ambiente de desenvolvimento..."
    
    # Verificar sa√∫de dos containers
    local app_healthy=false
    local db_healthy=false
    local max_attempts=5
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        log "INFO" "Verifica√ß√£o $attempt/$max_attempts..."
        
        # Verificar PostgreSQL
        if docker exec notionia_dev_postgres pg_isready -U pguser_dev -d notionai_dev >/dev/null 2>&1; then
            db_healthy=true
        fi
        
        # Verificar aplica√ß√£o
        if docker logs notionia_dev_app 2>&1 | grep -q "Application startup complete\|Running on http\|Streamlit app is running" >/dev/null 2>&1; then
            app_healthy=true
        fi
        
        if [ "$app_healthy" == "true" ] && [ "$db_healthy" == "true" ]; then
            break
        fi
        
        sleep 5
        ((attempt++))
    done
    
    # Relat√≥rio de verifica√ß√£o
    if [ "$db_healthy" == "true" ]; then
        log "SUCCESS" "PostgreSQL de desenvolvimento est√° saud√°vel"
    else
        log "ERROR" "PostgreSQL de desenvolvimento n√£o est√° respondendo adequadamente"
    fi
    
    if [ "$app_healthy" == "true" ]; then
        log "SUCCESS" "Aplica√ß√£o de desenvolvimento est√° saud√°vel"
    else
        log "WARNING" "Aplica√ß√£o de desenvolvimento pode estar com problemas - verificar logs"
    fi
    
    # Exibir estat√≠sticas finais
    echo ""
    echo "üìä ESTAT√çSTICAS P√ìS-DEPLOY (DESENVOLVIMENTO):"
    echo "==========================================="
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep "notionia_dev"
    
    echo ""
    echo "üíæ UTILIZA√á√ÉO DE RECURSOS:"
    echo "========================="
    docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" | grep "notionia_dev"
}

# Fun√ß√£o para relat√≥rio final
final_report() {
    local deploy_success="$1"
    local backup_path="$2"
    
    echo ""
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë                RELAT√ìRIO FINAL (DESENVOLVIMENTO)            ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    if [ "$deploy_success" == "true" ]; then
        echo -e "${GREEN}üéâ DEPLOY DE DESENVOLVIMENTO CONCLU√çDO COM SUCESSO!${NC}"
        echo ""
        echo "‚úÖ Sistema limpo e otimizado"
        echo "‚úÖ Vari√°veis de ambiente de desenvolvimento configuradas"
        echo "‚úÖ Containers de desenvolvimento em execu√ß√£o"
        echo "‚úÖ Verifica√ß√µes p√≥s-deploy aprovadas"
    else
        echo -e "${RED}‚ùå DEPLOY DE DESENVOLVIMENTO FALHOU${NC}"
        echo ""
        echo -e "${YELLOW}üìã Passos de recupera√ß√£o:${NC}"
        echo "1. Verificar logs em: $LOG_FILE"
        echo "2. Restaurar backup de: $backup_path"
        echo "3. Executar: docker-compose -f docker-compose.dev.yml logs para diagn√≥stico"
    fi
    
    echo ""
    echo -e "${BLUE}üìã INFORMA√á√ïES IMPORTANTES:${NC}"
    echo "‚Ä¢ Log completo: $LOG_FILE"
    echo "‚Ä¢ Backup dispon√≠vel: $backup_path"
    echo "‚Ä¢ Secrets de desenvolvimento em: $PROJECT_DIR/config/secrets/development"
    echo ""
    echo -e "${YELLOW}üîß COMANDOS √öTEIS:${NC}"
    echo "‚Ä¢ docker-compose -f docker-compose.dev.yml ps   - Verificar status dos servi√ßos"
    echo "‚Ä¢ docker-compose -f docker-compose.dev.yml logs - Ver logs"
    echo "‚Ä¢ docker-compose -f docker-compose.dev.yml down - Parar servi√ßos"
    echo "‚Ä¢ docker-compose -f docker-compose.dev.yml up -d --build - Reiniciar servi√ßos"
    
    if [ "$deploy_success" == "true" ]; then
        echo ""
        echo -e "${GREEN}üåê ACESSO √Ä APLICA√á√ÉO DE DESENVOLVIMENTO:${NC}"
        echo "‚Ä¢ Frontend: http://localhost:${DEV_PORT}"
        echo "‚Ä¢ API: http://localhost:${API_PORT}"
        echo ""
        echo -e "${YELLOW}üí° DICA:${NC} As altera√ß√µes no c√≥digo em ./app ser√£o automaticamente refletidas (hot reload)"
    fi
}

# Fun√ß√£o principal
main() {
    # Criar logs directory
    mkdir -p "$(dirname "$LOG_FILE")"
    
    # Iniciar log
    log "INFO" "Iniciando deploy automatizado para ambiente de desenvolvimento..."
    log "INFO" "Ambiente: $ENVIRONMENT"
    log "INFO" "Limpeza for√ßada: $FORCE_CLEAN"
    log "INFO" "Rota√ß√£o de secrets: $ROTATE_SECRETS"
    log "INFO" "Porta Frontend: $DEV_PORT"
    log "INFO" "Porta API: $API_PORT"
    
    show_banner
    
    local backup_path=""
    local deploy_success=false
    
    # Executar pipeline de deploy
    if check_prerequisites; then
        if intelligent_cleanup; then
            if secure_environment_setup; then
                backup_path=$(pre_deploy_backup)
                if docker_deploy_dev; then
                    if post_deploy_verification; then
                        deploy_success=true
                        log "SUCCESS" "Pipeline de deploy de desenvolvimento conclu√≠do com sucesso!"
                    else
                        log "ERROR" "Falha na verifica√ß√£o p√≥s-deploy de desenvolvimento"
                    fi
                else
                    log "ERROR" "Falha no deploy Docker para desenvolvimento"
                fi
            else
                log "ERROR" "Falha na configura√ß√£o de vari√°veis seguras para desenvolvimento"
            fi
        else
            log "ERROR" "Falha na limpeza do projeto"
        fi
    else
        log "ERROR" "Falha na verifica√ß√£o de pr√©-requisitos"
    fi
    
    # Relat√≥rio final
    final_report "$deploy_success" "$backup_path"
    
    # Exit code baseado no sucesso
    if [ "$deploy_success" == "true" ]; then
        exit 0
    else
        exit 1
    fi
}

# Verificar argumentos de ajuda
if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    echo "Uso: $0 [force_clean] [rotate_secrets] [dev_port] [api_port]"
    echo ""
    echo "Par√¢metros:"
    echo "  force_clean     - true|false (padr√£o: false)"
    echo "  rotate_secrets  - true|false (padr√£o: false)"
    echo "  dev_port        - Porta para o frontend (padr√£o: 8501)"
    echo "  api_port        - Porta para a API (padr√£o: 8080)"
    echo ""
    echo "Exemplos:"
    echo "  $0                      - Deploy padr√£o"
    echo "  $0 true                 - Deploy com limpeza for√ßada"
    echo "  $0 false true           - Deploy com rota√ß√£o de secrets"
    echo "  $0 false false 3000 3001 - Deploy com portas personalizadas"
    echo ""
    echo "Ambiente:"
    echo "  Este script configura um ambiente de desenvolvimento local."
    echo "  O c√≥digo fonte √© montado para hot reload durante o desenvolvimento."
    exit 0
fi

# Executar deploy
main